<?phpclass Smart_SB_Connector {    private $avail_functions = array(        'new_post' => 'NewPost',        'get_post' => 'GetPost',        'upload_image' => 'UploadImage',        'get_terms' => 'GetTerms',	'check_credentials' => 'CheckCredentials',    );    function __construct() {            }        public static function ApiEcho($val) {        $output = serialize($val);        echo json_encode(array('type' => 'message', 'value' => $val));        die();    }        public static function HandleError($error) {        echo json_encode(array('type' => 'error', 'value' => $error));    }    function CheckCredentials($signature, $func) {        if (!isset($signature) || !isset($func) || (!get_option('sbc_hash'))) {            $auth = false;        } else {            $hash_key = get_option('sbc_hash');            if ($hash_key == $signature)                $auth = true;            else                $auth = false;        }        return $auth;    }    function ProcessRequest() {        global $current_user; //wp variable        $auth = $this->CheckCredentials(isset($_POST['sbc_hash']) ? $_POST['sbc_hash'] : '', isset($_POST['function']) ? $_POST['function'] : '');        if (!$auth && isset($_POST['sbc_hash'])) {            $this->HandleError(__('Authentication failed! You do not have permission to add this blog', 'sb-connector'));        }        if (isset($_POST['function']) && isset($this->avail_functions[$_POST['function']])) {            call_user_func(array($this, ($auth ? $this->avail_functions[$_POST['function']] : $this->HandleError(__('Authentication failed! You do not have permission to add this blog', 'sb-connector')))));	            }	else {	    $this->HandleError(__('No predefined function is available for this call'));	}	    }    function NewPost() {        //Read form data                $custom_fields = unserialize($_POST['custom_fields']);	$post_terms_names = unserialize($_POST['term_names']);        $post_category = isset($post_terms_names['category']) ? $post_terms_names['category'] : null;        $post_tags = isset($post_terms_names['post_tag']) ? $post_terms_names['post_tag'] : null;        $post_featured_image = $_POST['post_thumbnail'];                $res = $this->CreatePost($_POST, $custom_fields, $post_category, $post_tags, $post_featured_image);        $created = $res['success'];        if ($created != true) {            $this->HandleError($created);        }        $information['added'] = true;        $information['post_id'] = $res['post_id'];        $information['permalink'] = $res['permalink'];        $this->ApiEcho($information);    }    function CreatePost($fields, $custom_fields, $post_category, $post_tags, $post_featured_image) {        global $current_user;        //Search for all the images added to the new post        //some images have a href tag to click to navigate to the image.. we need to replace this too        if (isset($post_tags) && $post_tags != '')            $fields['tags_input'] = $post_tags;        //Save the post to the wp        remove_filter('content_save_pre', 'wp_filter_post_kses');  // to fix brake scripts or html        $post_status = $fields['post_status'];        $fields['post_status'] = 'auto-draft';        $new_post_id = wp_insert_post($fields, $wp_error);        //Show errors if something went wrong        if (is_wp_error($wp_error)) {            return $wp_error->get_error_message();        }        if (empty($new_post_id)) {            return 'Undefined error';        }        wp_update_post(array('ID' => $new_post_id, 'post_status' => $post_status));        $permalink = get_permalink($new_post_id);	if (count($custom_fields) > 0)	{	    foreach ($custom_fields as $meta_key => $meta_values) {		foreach ($meta_values as $meta_value) {		    add_post_meta($new_post_id, $meta_key, $meta_value);		}	    }	}                //If categories exist, create them (second parameter of wp_create_categories adds the categories to the post)        include_once(ABSPATH . 'wp-admin/includes/taxonomy.php'); //Contains wp_create_categories        if (isset($post_category) && $post_category != '') {            $categories = explode(',', $post_category);            if (count($categories) > 0) {                $cat_ids = array();		foreach ($categories as $cat) {		    if ($id = category_exists($cat))			$cat_ids[] = $id;		}		if (count($cat_ids) > 0)		    wp_set_post_categories($new_post_id, $cat_ids);                            }        }        //If featured image exists - set it        if ($post_featured_image != null) {            try {                $upload = $this->UploadImage($post_featured_image, true); //Upload image to WP                if ($upload != null) {                    update_post_meta($new_post_id, '_thumbnail_id', $upload['id']); //Add the thumbnail to the post!                }            } catch (Exception $e) {                return 'Error in uploading media';            }        }        $ret['success'] = true;        $ret['permalink'] = $permalink;        $ret['post_id'] = $new_post_id;        return $ret;    }        function UploadImage($image_path = '', $no_api_echo = false)    {                if (!isset($image_path) || $image_path == '')        {            $image_path = isset($_POST['image_url']) ? $_POST['image_url'] : '';        }        include_once(ABSPATH . 'wp-admin/includes/file.php'); //Contains download_url        //Download $img_url        $temporary_file = download_url($image_path);        if (is_wp_error($temporary_file))        {            $this->HandleError('There is an error with this method');        }        else        {                        $upload_dir = wp_upload_dir();            $local_img_path = $upload_dir['path'] . DIRECTORY_SEPARATOR . basename($image_path); //Local name            $local_img_url = $upload_dir['url'] . '/' . basename($image_path);            $moved = @rename($temporary_file, $local_img_path);            if ($moved)            {                                $wp_filetype = wp_check_filetype(basename($image_path), null); //Get the filetype to set the mimetype                $attachment = array(                    'post_mime_type' => $wp_filetype['type'],                    'post_title' => preg_replace('/\.[^.]+$/', '', basename($image_path)),                    'post_content' => '',                    'post_status' => 'inherit'                );                $attach_id = wp_insert_attachment($attachment, $local_img_path); //Insert the image in the database                require_once(ABSPATH . 'wp-admin/includes/image.php');                $attach_data = wp_generate_attachment_metadata($attach_id, $local_img_path);                wp_update_attachment_metadata($attach_id, $attach_data); //Update generated metadata                if (!$no_api_echo)                {                    $this->ApiEcho(array('id' => $attach_id, 'url' => $local_img_url));                }                else {                    return array('id' => $attach_id, 'url' => $local_img_url);                }            }        }        if (file_exists($temporary_file))        {            unlink($temporary_file);        }        return null;    }        function GetTerms()    {        $taxonomy =  ($_POST['taxonomy']);        $rslt = get_terms(taxonomy_exists($taxonomy) ? $taxonomy : 'category', 'hide_empty=0');        $this->ApiEcho($rslt);    }        function set_terms()    {        $id =  ($_POST['id']);        $terms =  ($_POST['terms']);        $taxonomy =  ($_POST['taxonomy']);        if (trim($terms) != '')        {            $terms = explode(',', $terms);            if (count($terms) > 0)            {                wp_set_object_terms($id, array_map('intval', $terms), taxonomy_exists($taxonomy) ? $taxonomy : 'category');            }        }    }}    